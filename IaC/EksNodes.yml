AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group workers
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-dso-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group workers
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-dso-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterCluster:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow worker nodes in group workers to communicate with control plane
        (kubelet and workload TCP ports)
      FromPort: 1025
      GroupId: !Ref SG
      IpProtocol: tcp
      SourceSecurityGroupId: !ImportValue 'eksctl-dso-cluster::SecurityGroup'
      ToPort: 65535
  IngressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow worker nodes in group workers to communicate with control plane
        (workloads using HTTPS port, commonly used with extension API servers)
      FromPort: 443
      GroupId: !Ref SG
      IpProtocol: tcp
      SourceSecurityGroupId: !ImportValue 'eksctl-dso-cluster::SecurityGroup'
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        workers
      FromPort: 443
      GroupId: !ImportValue 'eksctl-dso-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: workers-Node
        - Key: kubernetes.io/cluster/dso
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-dso-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '0'
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-0fb3fa4b0f47527d4
        InstanceType: t3.micro
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-dso-cluster::SharedNodeSecurityGroup'
              - !Ref SG
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Communication between the control plane and worker nodes in group
        workers
      Tags:
        - Key: kubernetes.io/cluster/dso
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-dso-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
